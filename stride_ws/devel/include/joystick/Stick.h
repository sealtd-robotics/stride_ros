// Generated by gencpp from file joystick/Stick.msg
// DO NOT EDIT!


#ifndef JOYSTICK_MESSAGE_STICK_H
#define JOYSTICK_MESSAGE_STICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joystick
{
template <class ContainerAllocator>
struct Stick_
{
  typedef Stick_<ContainerAllocator> Type;

  Stick_()
    : travel(0.0)
    , angle(0.0)  {
    }
  Stick_(const ContainerAllocator& _alloc)
    : travel(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef float _travel_type;
  _travel_type travel;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::joystick::Stick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joystick::Stick_<ContainerAllocator> const> ConstPtr;

}; // struct Stick_

typedef ::joystick::Stick_<std::allocator<void> > Stick;

typedef boost::shared_ptr< ::joystick::Stick > StickPtr;
typedef boost::shared_ptr< ::joystick::Stick const> StickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joystick::Stick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joystick::Stick_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joystick::Stick_<ContainerAllocator1> & lhs, const ::joystick::Stick_<ContainerAllocator2> & rhs)
{
  return lhs.travel == rhs.travel &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joystick::Stick_<ContainerAllocator1> & lhs, const ::joystick::Stick_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joystick

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::joystick::Stick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joystick::Stick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joystick::Stick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joystick::Stick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joystick::Stick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joystick::Stick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joystick::Stick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ac9ad86115642357f119d6100be459c";
  }

  static const char* value(const ::joystick::Stick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ac9ad8611564235ULL;
  static const uint64_t static_value2 = 0x7f119d6100be459cULL;
};

template<class ContainerAllocator>
struct DataType< ::joystick::Stick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joystick/Stick";
  }

  static const char* value(const ::joystick::Stick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joystick::Stick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 travel # between 0 and 1\n"
"float32 angle  # radian\n"
;
  }

  static const char* value(const ::joystick::Stick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joystick::Stick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.travel);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Stick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joystick::Stick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joystick::Stick_<ContainerAllocator>& v)
  {
    s << indent << "travel: ";
    Printer<float>::stream(s, indent + "  ", v.travel);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOYSTICK_MESSAGE_STICK_H
