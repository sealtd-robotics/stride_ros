// Generated by gencpp from file can_interface/WheelRPM.msg
// DO NOT EDIT!


#ifndef CAN_INTERFACE_MESSAGE_WHEELRPM_H
#define CAN_INTERFACE_MESSAGE_WHEELRPM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_interface
{
template <class ContainerAllocator>
struct WheelRPM_
{
  typedef WheelRPM_<ContainerAllocator> Type;

  WheelRPM_()
    : left_front(0.0)
    , left_back(0.0)
    , right_front(0.0)
    , right_back(0.0)  {
    }
  WheelRPM_(const ContainerAllocator& _alloc)
    : left_front(0.0)
    , left_back(0.0)
    , right_front(0.0)
    , right_back(0.0)  {
  (void)_alloc;
    }



   typedef float _left_front_type;
  _left_front_type left_front;

   typedef float _left_back_type;
  _left_back_type left_back;

   typedef float _right_front_type;
  _right_front_type right_front;

   typedef float _right_back_type;
  _right_back_type right_back;





  typedef boost::shared_ptr< ::can_interface::WheelRPM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_interface::WheelRPM_<ContainerAllocator> const> ConstPtr;

}; // struct WheelRPM_

typedef ::can_interface::WheelRPM_<std::allocator<void> > WheelRPM;

typedef boost::shared_ptr< ::can_interface::WheelRPM > WheelRPMPtr;
typedef boost::shared_ptr< ::can_interface::WheelRPM const> WheelRPMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_interface::WheelRPM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_interface::WheelRPM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_interface::WheelRPM_<ContainerAllocator1> & lhs, const ::can_interface::WheelRPM_<ContainerAllocator2> & rhs)
{
  return lhs.left_front == rhs.left_front &&
    lhs.left_back == rhs.left_back &&
    lhs.right_front == rhs.right_front &&
    lhs.right_back == rhs.right_back;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_interface::WheelRPM_<ContainerAllocator1> & lhs, const ::can_interface::WheelRPM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::can_interface::WheelRPM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_interface::WheelRPM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_interface::WheelRPM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_interface::WheelRPM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_interface::WheelRPM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_interface::WheelRPM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_interface::WheelRPM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7409db75cdf11985ad54203bb29757ca";
  }

  static const char* value(const ::can_interface::WheelRPM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7409db75cdf11985ULL;
  static const uint64_t static_value2 = 0xad54203bb29757caULL;
};

template<class ContainerAllocator>
struct DataType< ::can_interface::WheelRPM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_interface/WheelRPM";
  }

  static const char* value(const ::can_interface::WheelRPM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_interface::WheelRPM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_front\n"
"float32 left_back\n"
"float32 right_front\n"
"float32 right_back\n"
;
  }

  static const char* value(const ::can_interface::WheelRPM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_interface::WheelRPM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_front);
      stream.next(m.left_back);
      stream.next(m.right_front);
      stream.next(m.right_back);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelRPM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_interface::WheelRPM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_interface::WheelRPM_<ContainerAllocator>& v)
  {
    s << indent << "left_front: ";
    Printer<float>::stream(s, indent + "  ", v.left_front);
    s << indent << "left_back: ";
    Printer<float>::stream(s, indent + "  ", v.left_back);
    s << indent << "right_front: ";
    Printer<float>::stream(s, indent + "  ", v.right_front);
    s << indent << "right_back: ";
    Printer<float>::stream(s, indent + "  ", v.right_back);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_INTERFACE_MESSAGE_WHEELRPM_H
